// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: olt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OltServiceClient is the client API for OltService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OltServiceClient interface {
	OltSeeSignal(ctx context.Context, in *OltSeeSignalRequest, opts ...grpc.CallOption) (*OltSeeSignalResponse, error)
}

type oltServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOltServiceClient(cc grpc.ClientConnInterface) OltServiceClient {
	return &oltServiceClient{cc}
}

func (c *oltServiceClient) OltSeeSignal(ctx context.Context, in *OltSeeSignalRequest, opts ...grpc.CallOption) (*OltSeeSignalResponse, error) {
	out := new(OltSeeSignalResponse)
	err := c.cc.Invoke(ctx, "/equipment.OltService/OltSeeSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OltServiceServer is the server API for OltService service.
// All implementations must embed UnimplementedOltServiceServer
// for forward compatibility
type OltServiceServer interface {
	OltSeeSignal(context.Context, *OltSeeSignalRequest) (*OltSeeSignalResponse, error)
	mustEmbedUnimplementedOltServiceServer()
}

// UnimplementedOltServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOltServiceServer struct {
}

func (UnimplementedOltServiceServer) OltSeeSignal(context.Context, *OltSeeSignalRequest) (*OltSeeSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OltSeeSignal not implemented")
}
func (UnimplementedOltServiceServer) mustEmbedUnimplementedOltServiceServer() {}

// UnsafeOltServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OltServiceServer will
// result in compilation errors.
type UnsafeOltServiceServer interface {
	mustEmbedUnimplementedOltServiceServer()
}

func RegisterOltServiceServer(s grpc.ServiceRegistrar, srv OltServiceServer) {
	s.RegisterService(&OltService_ServiceDesc, srv)
}

func _OltService_OltSeeSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OltSeeSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OltServiceServer).OltSeeSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equipment.OltService/OltSeeSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OltServiceServer).OltSeeSignal(ctx, req.(*OltSeeSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OltService_ServiceDesc is the grpc.ServiceDesc for OltService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OltService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "equipment.OltService",
	HandlerType: (*OltServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OltSeeSignal",
			Handler:    _OltService_OltSeeSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "olt.proto",
}
